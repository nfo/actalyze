#!/usr/bin/env ruby

require 'digest/sha1'
require 'json'

require 'bundler'
Bundler.setup(:beacon)

require 'goliath'
require 'redis'
require 'hiredis'
require 'redis/connection/synchrony'

RESPONSE_204 = [204, {}, nil]
REDIS_POOL_SIZE = 10
# The connection pool does not work with EVAL
# REDIS_POOL = EventMachine::Synchrony::ConnectionPool.new(size: REDIS_POOL_SIZE) do
#   ::Redis.new(namespace: 'actalyze')
# end
REDIS_POOL = ::Redis.new(namespace: 'actalyze')

REDIS_SCRIPT_CONVERSION = File.read(File.join(File.expand_path(File.dirname(__FILE__)), 'conversion_load_time_range.lua'))
REDIS_SCRIPT_CONVERSION_SHA1 = Digest::SHA1.hexdigest(REDIS_SCRIPT_CONVERSION)
REDIS_SCRIPT_ENGAGEMENT = File.read(File.join(File.expand_path(File.dirname(__FILE__)), 'engagement_load_time_range.lua'))
REDIS_SCRIPT_ENGAGEMENT_SHA1 = Digest::SHA1.hexdigest(REDIS_SCRIPT_ENGAGEMENT)

class Beacon < Goliath::API
  use Goliath::Rack::Params

  def response(env)
    uuid = params[:uuid]
    total_load_time = params[:total_load_time]

    converted = params[:pathname] == '/registered' ? 1 : 0

    # REDIS_POOL.script :flush
    res = run_script REDIS_SCRIPT_CONVERSION, REDIS_SCRIPT_CONVERSION_SHA1, 1, uuid, total_load_time, converted
    puts res.inspect

    res = run_script REDIS_SCRIPT_ENGAGEMENT, REDIS_SCRIPT_ENGAGEMENT_SHA1, 1, uuid, total_load_time
    puts res.inspect

    # [200, {}, res.inspect + "\n"]
    RESPONSE_204
  end

  protected

  # Redis keeps a compiled version of already-ran scripts.
  def run_script(script, script_sha1, *params)
    begin
      REDIS_POOL.evalsha script_sha1, *params
    rescue RuntimeError
      if $!.message =~ /NOSCRIPT/
        REDIS_POOL.eval script, *params
      end
    end
  end
end